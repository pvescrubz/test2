require('dotenv').config();
const axios = require('axios');

async function checkVkAccount(token) {
    try {
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResponse = await axios.get('https://api.vk.com/method/users.get', {
            params: {
                access_token: token,
                v: '5.199'
            }
        });

        const userData = userResponse.data;

        if (!userData.response || userData.response.length === 0) {
            return { status: 'unknown' };
        }

        const userId = userData.response[0].id;
        const firstName = userData.response[0].first_name;
        const lastName = userData.response[0].last_name;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –≤ —Å—Å—ã–ª–∫–µ)
        const profileLink = `https://vk.com/id${userId}`;

        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const wallResponse = await axios.get('https://api.vk.com/method/wall.get', {
            params: {
                owner_id: userId,
                count: 1, // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ–≥–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
                access_token: token,
                v: '5.199'
            }
        });

        const wallData = wallResponse.data;

        // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
        let friendsCount = 0;
        try {
            const friendsResponse = await axios.get('https://api.vk.com/method/friends.get', {
                params: {
                    user_id: userId,
                    count: 0, // —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±–µ–∑ —Å–ø–∏—Å–∫–∞
                    access_token: token,
                    v: '5.199'
                }
            });
            friendsCount = friendsResponse.data.response?.count || 0;
        } catch (friendsError) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å), –æ—Å—Ç–∞–≤–ª—è–µ–º 0
        }

        if (wallData.response && wallData.response.items) {
            return { 
                status: 'active', 
                id: userId, 
                firstName, 
                lastName, 
                profileLink,
                friendsCount  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π
            };
        } else {
            return { status: 'banned_or_deleted' };
        }

    } catch (error) {
        if (error.response && error.response.data && error.response.data.error) {
            const vkError = error.response.data.error;
            const errorCode = vkError.error_code;

            switch (errorCode) {
                case 5:
                    return { status: 'invalid_token' };
                case 15:
                    return { status: 'access_denied' };
                case 18:
                    return { status: 'banned_or_deleted' };
                default:
                    return { status: 'vk_error', code: errorCode, message: vkError.error_msg };
            }
        } else {
            return { status: 'network_error', error: error.message };
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤...\n');

    const results = [];

    for (let i = 1; i <= 15; i++) {
        const tokenKey = `TOKEN_${i}`;
        const token = process.env[tokenKey];

        if (!token) {
            results.push({ tokenNumber: i, status: 'missing_in_env' });
            continue;
        }

        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω #${i}...`);

        const result = await checkVkAccount(token);
        results.push({ tokenNumber: i, status: result.status, details: result });
    }

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
results.forEach(r => {
    let msg = `–¢–æ–∫–µ–Ω #${r.tokenNumber}: `;
    switch (r.status) {
        case 'active':
            msg += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π | –ò–º—è: ${r.details.firstName} ${r.details.lastName} | –î—Ä—É–∑–µ–π: ${r.details.friendsCount} | –°—Å—ã–ª–∫–∞: ${r.details.profileLink}`;
            break;
        case 'invalid_token':
            msg += `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω`;
            break;
        case 'access_denied':
            msg += `üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)`;
            break;
        case 'banned_or_deleted':
            msg += `üõë –£–¥–∞–ª—ë–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
            break;
        case 'missing_in_env':
            msg += `‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ .env`;
            break;
        case 'network_error':
            msg += `üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${r.details.error}`;
            break;
        default:
            msg += `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${r.status}`;
    }
    console.log(msg);
});
}

main();