const path = require("path");
const TelegramBot = require('node-telegram-bot-api');
const { StringSession } = require("telegram/sessions");
const { Api, TelegramClient } = require("telegram");
const axios = require("axios"); 
require("dotenv").config({ path: path.resolve(__dirname, "../.env") }); // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TELEGRAM_THREAD = process.env.TELEGRAM_THREAD;
const express = require("express");
const multer = require("multer");
const fs = require("fs"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fs
const { writePost, uploadPhotoToVK, uploadVideoToVK } = require("./vk-api");
const app = express();
const sharp = require('sharp');
const screenshotConfig = require("./screenshotConfig");
const ACCOUNTS = require("./accounts.json");
app.use(express.json());
app.use(express.static(path.join(__dirname, "../public"))); // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
console.log("Telegram Bot Token:", process.env.TELEGRAM_BOT_TOKEN);
console.log("Chat ID:", process.env.TELEGRAM_CHAT_ID);
console.log("Thread ID:", process.env.TELEGRAM_THREAD);

async function sendToTelegram(usernames, links, type = 'post') {
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –¢–ì...");
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.warn("‚ö†Ô∏è Telegram API –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã");
      return;
  }

  console.log("üì¨ –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", usernames);
  console.log("üîó –°—Å—ã–ª–∫–∏:", links);

  const header = type === 'post' ? '–°–¥–µ–ª–∞–Ω—ã –ø–æ—Å—Ç—ã –æ—Ç:' : '–°–¥–µ–ª–∞–Ω—ã —Ä–µ–ø–æ—Å—Ç—ã –æ—Ç:';
  const usernamesText = usernames.join(', ');
  const linksText = "```\n" + links.join("\n") + "\n```";
  const message = `${header}\n${usernamesText}\n\n–°—Å—ã–ª–∫–∏:\n${linksText}`;

  try {
      await bot.sendMessage(TELEGRAM_CHAT_ID, message, {
          parse_mode: 'MarkdownV2',
          
              message_thread_id: TELEGRAM_THREAD
          
      });
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ì");
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –¢–ì:", error.message);
      if (error.response && error.response.body) {
          console.error("üì® –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:", error.response.body);
      }
  }
}


async function getVkUserId(vkToken) {
  try {
    const response = await axios.get("https://api.vk.com/method/users.get",  {
      params: {
        access_token: vkToken,
        v: "5.199",
      },
    });

    const user = response.data.response?.[0];
    if (!user) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö");

    return user.id;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ vk_user_id:", error.message);
    return null;
  }
}

app.get("/kiril111", (req, res) => {
    const filePath = path.join(__dirname, "../public/kiril111.html");
    console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    res.sendFile(filePath);
});




app.get("/kurlovurod1", (req, res) => {
    const filePath = path.join(__dirname, "../public/kurlovurod1.html");
    console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    res.sendFile(filePath);
});
app.get("/kurlovurod2", (req, res) => {
    const filePath = path.join(__dirname, "../public/kurlovurod2.html");
    console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    res.sendFile(filePath);
});
app.get("/kurlovurod3", (req, res) => {
    const filePath = path.join(__dirname, "../public/kurlovurod3.html");
    console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe213x", (req, res) => {
    const filePath = path.join(__dirname, "../public/ksadwqe213x.html");
    console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe216x", (req, res) => {
  const filePath = path.join(__dirname, "../public/ksadwqe216x.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe214x", (req, res) => {
  const filePath = path.join(__dirname, "../public/ksadwqe214x.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe215x", (req, res) => {
  const filePath = path.join(__dirname, "../public/ksadwqe215x.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe217x", (req, res) => {
  const filePath = path.join(__dirname, "../public/ksadwqe217x.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/ksadwqe218x", (req, res) => {
  const filePath = path.join(__dirname, "../public/ksadwqe218x.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/like", (req, res) => {
  const filePath = path.join(__dirname, "../public/like.html");
  console.log("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
  res.sendFile(filePath);
});

// API endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
app.post('/api/process', async (req, res) => {
    try {
        const { links } = req.body;
        
        if (!Array.isArray(links) || links.length === 0) {
            return res.status(400).json({ 
                status: 'error', 
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫' 
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        const results = [];
        for (const link of links) {
            try {
                await processVkLink(link);
                results.push({ link, status: 'success' });
                await delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫
            } catch (error) {
                results.push({ 
                    link, 
                    status: 'error', 
                    message: error.message 
                });
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const successCount = results.filter(r => r.status === 'success').length;
        const message = `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∏–∑ ${links.length}`;

        res.json({
            status: 'success',
            message,
            results
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ API:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.get('/add-likes', async (req, res) => {
    const { link } = req.query;
    if (!link) {
        return res.status(400).json({ error: '–°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' });
    }

    let ownerId, postId;
    try {
        const parsedLink = parsePostLink(link);
        if (!parsedLink) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏' });
        }
        ({ ownerId, postId } = parsedLink);
    } catch (error) {
        return res.status(400).json({ error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏: ${error.message}` });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
    const allTokens = Object.entries(process.env)
        .filter(([key]) => key.startsWith('TOKEN_'))
        .map(([, value]) => value);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    const taskId = addTaskToQueue(ownerId, postId, allTokens, (update) => {
        res.write(`data: ${JSON.stringify(update)}\n\n`);
    });

    console.log(`[–û—á–µ—Ä–µ–¥—å] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å ID: ${taskId}`);
});
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, "../uploads/")); // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ uploads
  },
  filename: function (req, file, cb) {
    const ext = path.extname(file.originalname);
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, file.fieldname + "-" + uniqueSuffix + ext);
  },
});
const upload = multer({ storage: storage }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–æ–≤
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ –∫ –ø–æ—Å—Ç—É –∏–ª–∏ —Ä–µ–ø–æ—Å—Ç—É
async function likePost(token, ownerId, postId, isRepost = false) {
    if (!ownerId || !postId) {
        console.error(`–û—à–∏–±–∫–∞: ownerId –∏–ª–∏ postId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã (ownerId=${ownerId}, postId=${postId})`);
        return { success: false, error: 'ownerId –∏–ª–∏ postId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã' };
    }
    try {
        const response = await axios.get('https://api.vk.com/method/likes.add', {
            params: {
                access_token: token,
                type: 'post', // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–∏–ø
                owner_id: ownerId,
                item_id: postId,
                v: '5.131'
            }
        });
        console.log(`–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${isRepost ? '—Ä–µ–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–∞'} wall${ownerId}_${postId}`);
        return { success: true };
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –¥–ª—è ${isRepost ? '—Ä–µ–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–∞'} wall${ownerId}_${postId}: ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function processLinks(links, type = 'post') {
  if (!Array.isArray(links) || links.length === 0) {
    throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
  const results = [];
  const successfulLinks = [];
  const usernames = [];

  for (const link of links) {
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
      await processVkLink(link);
      results.push({ link, status: 'success' });
      successfulLinks.push(link);
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å username (–¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤)
      if (type === 'repost') {
        const parsed = parsePostLink(link);
        if (parsed) {
          const userInfo = await getUserInfoByPost(parsed.ownerId); // –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
          if (userInfo) {
            usernames.push(`${userInfo.firstName} ${userInfo.lastName}`.trim());
          }
        }
      }
      
      await delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫
    } catch (error) {
      results.push({ 
        link, 
        status: 'error', 
        message: error.message 
      });
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${link}:`, error.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  if (successfulLinks.length > 0 && TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
    try {
      const names = usernames.length > 0 ? usernames : ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è'];
      await sendToTelegram(names, successfulLinks, type);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successCount = results.filter(r => r.status === 'success').length;
  return {
    status: 'success',
    message: `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} –∏–∑ ${links.length}`,
    results
  };
}
async function getUserInfoByPost(ownerId) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–º—É ownerId
    const account = ACCOUNTS.find(acc => 
      acc.vk_user_id === Math.abs(ownerId) || 
      (acc.vk_token && getVkUserId(acc.vk_token) === Math.abs(ownerId)
    ));
    
    if (account && account.vk_token) {
      return await getUserInfo(account.vk_token);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    return null;
  }
}


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/get-last-post", async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      console.error("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç token");
      return res
        .status(400)
        .json({ success: false, error: "Token is required" });
    }

    // –í—ã–∑–æ–≤ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–µ–Ω—ã
    const response = await axios.get("https://api.vk.com/method/wall.get", {
      params: {
        access_token: token,
        owner_id: null, // –ï—Å–ª–∏ null, —Ç–æ –±–µ—Ä–µ—Ç—Å—è —Å—Ç–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —Ç–æ–∫–µ–Ω–æ–º
        count: 1, // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å (–ø–æ—Å–ª–µ–¥–Ω—é—é)
        filter: "owner", // –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Ç–µ–Ω—ã
        v: "5.131",
      },
    });

    console.log("–û—Ç–≤–µ—Ç –æ—Ç API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (wall.get):", response.data);

    const posts = response.data.response.items;
    if (posts.length === 0) {
      return res
        .status(404)
        .json({ success: false, error: "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    const lastPost = posts[0];
    const ownerId = lastPost.owner_id;
    const postId = lastPost.id;
    const postUrl = `https://vk.com/wall${ownerId}_${postId}`;

    res.json({ success: true, postUrl });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ wall.get:", error.message);
    res
      .status(500)
      .json({
        success: false,
        error: error.message || "Internal server error",
      });
  }
});

function parsePostLink(link) {
    try {
        const url = new URL(link);
        const pathParts = url.pathname.split('/');
        const object = pathParts[1];

        if (!/^wall-\d+_\d+$/.test(object) && !/^wall\d+_\d+$/.test(object)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏');
        }

        const [ownerId, postId] = object.replace('wall', '').split('_').map(Number);
        return { ownerId, postId };
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏ ${link}: ${error.message}`);
        return null;
    }
}
app.post('/send-repost', async (req, res) => {
    try {
      const { token, comment, link } = req.body;
      if (!token || !comment || !link) {
        return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' });
      }
  
      let ownerId, postId;
      try {
        // –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
        const parsedLink = parsePostLink(link);
        if (!parsedLink) {
          return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏' });
        }
        ({ ownerId, postId } = parsedLink);
        console.log(`–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç/—Ä–µ–ø–æ—Å—Ç: wall${ownerId}_${postId}`);
      } catch (e) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏' });
      }
  
      try {
        // –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–∞
        await delay(500);
        const response = await axios.get('https://api.vk.com/method/wall.repost', {
          params: {
            access_token: token,
            object: `wall${ownerId}_${postId}`,
            message: comment,
            v: '5.131'
          }
        });
  
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
        console.log('–û—Ç–≤–µ—Ç –æ—Ç API VK (wall.repost):', response.data);
  
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
        if (!response.data.response || !response.data.response.post_id) {
          console.error("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API VK –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ—Å—Ç–∞");
          return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å post_id –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞" });
        }
  
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ownerId –∏ postId –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞
        const userInfo = await getUserInfo(token); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const repostOwnerId = response.data.response.owner_id || userInfo.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerId –∏–∑ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        const repostPostId = response.data.response.post_id;
  
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ—Å—Ç
        const repostUrl = `https://vk.com/wall${repostOwnerId}_${repostPostId}`;
        console.log(`–†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${repostUrl}`);
  
        // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£ –°–°–´–õ–ö–£ –°–†–ê–ó–£
        res.json({ success: true, repostUrl });
        // –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í –¢–ï–õ–ï–ì–†–ê–ú
        const firstName = userInfo.firstName || '';
        const lastName = userInfo.lastName || '';
        const username = `${firstName} ${lastName}`.trim();

sendToTelegram([username], [repostUrl]);
        // –ê –õ–ê–ô–ö–ò –í–´–ü–û–õ–ù–Ø–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–û, –ß–¢–û–ë–´ –ù–ï –ñ–î–ê–¢–¨
        setTimeout(async () => {
          try {
            const parsedRepostLink = parsePostLink(repostUrl);
            if (!parsedRepostLink) {
              console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ—Å—Ç");
              return;
            }
  
            const { ownerId: likeOwnerId, postId: likePostId } = parsedRepostLink;
            const allTokens = getRandomTokens("(1-40)");
  
            for (const likeToken of allTokens) {
              try {
                await delay(700);
                await likePost(likeToken, likeOwnerId, likePostId);
                console.log(`–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è wall${likeOwnerId}_${likePostId}`);
              } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${likeToken}: ${error.message}`);
              }
            }
          } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –ª–∞–π–∫–∏–Ω–≥–µ:", e.message);
          }
        }, 0);
  
      } catch (apiError) {
        res.status(500).json({ error: `–û—à–∏–±–∫–∞ API: ${apiError.message}` });
      }
    } catch (error) {
      res.status(500).json({ error: `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}` });
    }
  });
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ª–∞–π–∫–∞
async function checkIsLiked(token, ownerId, postId, type = 'post') {
  try {
      const response = await axios.get('https://api.vk.com/method/likes.isLiked', {
          params: {
              access_token: token,
              type: type,
              owner_id: ownerId,
              item_id: postId,
              v: '5.131'
          }
      });

      // –ï—Å–ª–∏ liked = 1, –∑–Ω–∞—á–∏—Ç –ª–∞–π–∫ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
      return response.data.response.liked === 1;
  } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞ –¥–ª—è wall${ownerId}_${postId}: ${error.message}`);
      return false;
  }
}

function getRandomTokens(range = null) {
  let tokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('TOKEN_'))
      .map(([key, value]) => {
          const tokenNumber = parseInt(key.replace('TOKEN_', ''), 10);
          return { token: value, number: tokenNumber };
      })
      .sort((a, b) => a.number - b.number);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (range) {
      const [min, max] = range.match(/^\((\d+)-(\d+)\)$/).slice(1).map(Number);
      tokens = tokens.filter(({ number }) => number >= min && number <= max);
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–∫–µ–Ω–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  const shuffledTokens = tokens.sort(() => Math.random() - 0.5);

  
  const randomCount = 50;

  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  return shuffledTokens.slice(0, randomCount).map(({ token }) => token);
}

app.post('/send-posts', upload.array('files'), async (req, res) => {
  const tokensJson = req.body.tokens;
  const postsJson = req.body.posts;
  const files = req.files;

  if (!tokensJson || !postsJson) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è' });
  }

  let tokensData, postsData;

  try {
      tokensData = JSON.parse(tokensJson);
      postsData = JSON.parse(postsJson);

      if (!Array.isArray(postsData)) {
          throw new Error('JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
      }

      if (postsData.every(post => typeof post === 'string')) {
          postsData = postsData.map(text => ({ text }));
      } else if (postsData.every(post => typeof post === 'object' && post.text)) {
          // –≤—Å—ë –æ–∫
      } else {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø–æ—Å—Ç–æ–≤');
      }
  } catch (error) {
      return res.status(400).json({ error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: ${error.message}` });
  }

  const publishedPosts = [];
  const allUsers = [];

  for (const token of tokensData) {
      try {
          const userInfo = await getUserInfo(token);
          allUsers.push(userInfo);
      } catch (error) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ç–æ–∫–µ–Ω–æ–º ${token}: ${error.message}`);
          allUsers.push({ id: 'unknown', firstName: '', lastName: '' });
      }
  }

  // –≠—Ç–∞–ø 2: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
  for (let i = 0; i < Math.min(tokensData.length, postsData.length); i++) {
      const token = tokensData[i];
      const post = postsData[i];

      try {
          const userInfo = allUsers[i] || {};
          const ownerId = userInfo.id;

          let attachments = [];

          if (files && files.length > 0) {
              for (const file of files) {
                  const ext = path.extname(file.originalname).toLowerCase();
                  let attachment = null;

                  if (['.jpg', '.jpeg', '.png'].includes(ext)) {
                      attachment = await uploadPhotoToVK(token, ownerId, file.path);
                  } else if (['.mp4', '.avi', '.mov'].includes(ext)) {
                      attachment = await uploadVideoToVK(token, ownerId, file.path);
                  } else {
                      console.error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.originalname}`);
                  }

                  if (attachment) {
                      attachments.push(attachment);
                  } else {
                      fs.unlinkSync(file.path);
                  }
              }
          }

          const result = await writePost(token, ownerId, post.text, attachments);

          if (result.success) {
              const postUrl = `https://vk.com/wall${ownerId}_${result.postId}`;
              publishedPosts.push({
                  ownerId,
                  postId: result.postId,
                  postUrl
              });
          } else {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ${result.message}`);
          }
      } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–æ–º: ${error.message || error}`);
      }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∏ —Å—Å—ã–ª–æ–∫
  const usernames = publishedPosts.map((_, index) => {
      const user = allUsers[index] || {};
      return `${user.firstName || ''} ${user.lastName || ''}`.trim();
  });

  const links = publishedPosts.map(p => p.postUrl);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
  if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      await sendToTelegram(usernames, links, 'post'); 
  }
  if (publishedPosts.length > 0) {
      const postLinks = publishedPosts.map(post => post.postUrl);
      const processingResult = await processLinks(postLinks, 'post');
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processingResult);
    }

  // –ê–°–ò–ù–•–†–û–ù–ù–û –°–¢–ê–í–ò–ú –õ–ê–ô–ö–ò
  setTimeout(async () => {
      try {
          const allTokens = Object.entries(process.env)
              .filter(([key]) => key.startsWith('TOKEN_'))
              .map(([, value]) => value);

          const shuffledTokens = [...allTokens].sort(() => Math.random() - 0.5);
          const selectedLikeTokens = shuffledTokens.slice(0, 50);

          for (const post of publishedPosts) {
              for (const likeToken of selectedLikeTokens) {
                  try {
                      await delay(700);
                      await likePost(likeToken, post.ownerId, post.postId);
                  } catch (error) {
                      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${likeToken}: ${error.message}`);
                  }
              }
          }

      } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –ª–∞–π–∫–∞—Ö:", e.message);
      }
  }, 0);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
  res.json(publishedPosts.map(post => ({
      success: true,
      postId: post.postId,
      postUrl: post.postUrl
  })));
});

app.post('/send-multiple-reposts', async (req, res) => {
    const { tokens, reposts } = req.body;

    if (!Array.isArray(tokens) || !Array.isArray(reposts)) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
    }

    if (tokens.length !== reposts.length) {
        return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–ø–æ—Å—Ç–æ–≤' });
    }

    const results = [];
    const usernames = [];

    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const { comment, link } = reposts[i];

        try {
            // –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
            const parsedLink = parsePostLink(link);
            if (!parsedLink) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏');

            const { ownerId, postId } = parsedLink;
            const response = await axios.get('https://api.vk.com/method/wall.repost', {
                params: {
                    access_token: token,
                    object: `wall${ownerId}_${postId}`,
                    message: comment,
                    v: '5.131'
                }
            });

            const userInfo = await getUserInfo(token);
            const repostOwnerId = response.data.response.owner_id || userInfo.id;
            const repostPostId = response.data.response.post_id;
            const repostUrl = `https://vk.com/wall${repostOwnerId}_${repostPostId}`;
            results.push(repostUrl);

            const firstName = userInfo.firstName || '';
            const lastName = userInfo.lastName || '';
            usernames.push(`${firstName} ${lastName}`.trim());

            setTimeout(async () => {
                const parsedRepostLink = parsePostLink(repostUrl);
                if (!parsedRepostLink) return;

                const { ownerId: likeOwnerId, postId: likePostId } = parsedRepostLink;
                const allTokens = getRandomTokens("(1-100)");
                for (const likeToken of allTokens) {
                    try {
                        await delay(700);
                        await likePost(likeToken, likeOwnerId, likePostId);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: ${error.message}`);
                    }
                }
            }, 0);

        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç–µ: ${e.message}`);
        }
    }

    if (results.length > 0) {
        await sendToTelegram(usernames, results, 'repost'); // –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
              
    }

    if (results.length > 0) {
      const processingResult = await processLinks(results, 'repost');
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–æ—Å—Ç–æ–≤:', processingResult);
    }

    res.json({ success: true, count: results.length, links: results });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ GET
app.get("/fetch-users", async (req, res) => {
    try {
      const range = req.query.range; // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ query string
      let min = null, max = null;
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      if (range) {
        const match = range.match(/^\((\d+)-(\d+)\)$/);
        if (!match) {
          return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞" });
        }
        min = parseInt(match[1], 10);
        max = parseInt(match[2], 10);
  
        if (isNaN(min) || isNaN(max) || min > max) {
          return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è min –∏ max" });
        }
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞
      const tokensJson = Object.entries(process.env)
        .filter(([key]) => key.startsWith("TOKEN_"))
        .map(([key, value]) => {
          const tokenNumber = parseInt(key.replace("TOKEN_", ""), 10);
          return { token: value, number: tokenNumber };
        })
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É
        .sort((a, b) => a.number - b.number);
  
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      const filteredTokens = range
        ? tokensJson.filter((item) => item.number >= min && item.number <= max)
        : tokensJson;
  
      if (filteredTokens.length === 0) {
        return res.status(404).json({ error: "–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      const users = [];
      for (const { token } of filteredTokens) {
        try {
          const userInfo = await getUserInfo(token);
          users.push({ ...userInfo, token });
        } catch (error) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ç–æ–∫–µ–Ω–æ–º ${token}: ${
              error.message || error
            }`
          );
        }
      }
  
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      res.json(users);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /fetch-users:", error.message || error);
      res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function getUserInfo(token) {
  try {
    const response = await axios.get("https://api.vk.com/method/users.get", {
      params: {
        access_token: token,
        v: "5.131",
      },
    });

    console.log("–û—Ç–≤–µ—Ç –æ—Ç API VK:", response.data);

    if (
      !response.data.response ||
      !Array.isArray(response.data.response) ||
      response.data.response.length === 0
    ) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API VK");
    }

    const user = response.data.response[0];
    return {
      id: user.id,
      firstName: user.first_name,
      lastName: user.last_name,
    };
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:",
      error.message || error
    );
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// === –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á ===
const taskQueue = [];
let isProcessing = false;




// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const DEFAULT_API_ID = ACCOUNTS[0]?.api_id || 22482713;
const DEFAULT_API_HASH = ACCOUNTS[0]?.api_hash || "76343050cd0b4d8e3cc95b9ceee667fe";

let clients = [];


// === –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ –í–ö ===
function parseVkPostUrl(url) {
    const match = url.match(/vk\.com\/wall(-?\d+)_(\d+)/i);
    if (!match) return null;

    return {
        ownerId: match[1],
        postId: match[2],
        fullId: `${match[1]}_${match[2]}`,
    };
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ===
async function generateScreenshot(url, attempt = 1) {
    const MAX_ATTEMPTS = 2;
    const RETRY_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    try {
        const apiKey = '4110c0';
        const { viewport, clip } = screenshotConfig;
        const apiUrl = `https://api.screenshotmachine.com?key=${apiKey}&url=${
            encodeURIComponent(url)
        }&dimension=${
            viewport.width
        }x${
            viewport.height
        }&device=desktop&format=jpg&delay=2000`;
        
        console.log(`üì∏ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç ${url}`);
        
        const screenshotDir = path.resolve(__dirname, 'screenshots');
        if (!fs.existsSync(screenshotDir)) {
            fs.mkdirSync(screenshotDir, { recursive: true });
        }

        const response = await axios.get(apiUrl, {
            responseType: 'arraybuffer',
            timeout: 30000
        });

        if (!response.data || response.data.length === 0) {
            throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤');
        }

        const outputPath = path.join(screenshotDir, `screenshot_${Date.now()}_attempt_${attempt}.jpg`);

        await sharp(response.data)
            .extract({
                left: Math.round(clip.x),
                top: Math.round(clip.y),
                width: Math.round(clip.width),
                height: Math.round(clip.height),
            })
            .toFile(outputPath);

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
        return outputPath;

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, err.message);
        
        if (attempt < MAX_ATTEMPTS) {
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${RETRY_DELAY/1000} —Å–µ–∫...`);
            await delay(RETRY_DELAY);
            return generateScreenshot(url, attempt + 1);
        } else {
            console.error(`üö´ –í—Å–µ ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å`);
            return null;
        }
    }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö ===
async function getVkUserId(vkToken) {
    try {
        const res = await axios.get("https://api.vk.com/method/users.get", {
            params: {
                v: "5.199",
                access_token: vkToken,
            },
        });

        const user = res.data.response?.[0];
        if (!user) throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö");

        return Math.abs(user.id);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –í–ö:", err.message);
        return null;
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
async function initClient(accountConfig) {
    try {
        const client = new TelegramClient(
            new StringSession(accountConfig.session),
            accountConfig.api_id || DEFAULT_API_ID,
            accountConfig.api_hash || DEFAULT_API_HASH,
            { connectionRetries: 5 }
        );

        await client.start({
            phoneNumber: () => Promise.resolve(""),
            password: () => Promise.resolve(""),
            phoneCode: () => Promise.resolve(""),
            onError: (err) => console.log(err),
        });

        if (!(await client.isUserAuthorized())) {
            console.warn(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
            return null;
        }

        const self = await client.getMe();
        console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${accountConfig.id} (${self.username}) –ø–æ–¥–∫–ª—é—á–µ–Ω`);

        // –ü–æ–ª—É—á–∞–µ–º VK ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        let vkUserId = accountConfig.vk_user_id;
        if (!vkUserId && accountConfig.vk_token) {
            vkUserId = await getVkUserId(accountConfig.vk_token);
        }

        return {
            id: accountConfig.id,
            client,
            username: self.username,
            chat_id: accountConfig.chat_id,
            vk_user_id: vkUserId,
            api_id: accountConfig.api_id || DEFAULT_API_ID,
            api_hash: accountConfig.api_hash || DEFAULT_API_HASH
        };

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountConfig.id}:`, err.message);
        return null;
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ===
async function checkChatAccess(client, chatId) {
    try {
        await client.getInputEntity(chatId);
        return true;
    } catch (err) {
        console.error(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É ${chatId}:`, err.message);
        return false;
    }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç ===
async function sendToChat(clientObj, chatId, link, imagePath) {
    try {
        if (!(await checkChatAccess(clientObj.client, chatId))) {
            return false;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await clientObj.client.sendMessage(chatId, {
            message: link
        });
        console.log(`üì® [${clientObj.username}] –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${chatId}`);

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (imagePath && fs.existsSync(imagePath)) {
            try {
                await clientObj.client.sendFile(chatId, {
                    file: imagePath
                });
                console.log(`üñºÔ∏è [${clientObj.username}] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
                fs.unlinkSync(imagePath);
            } catch (err) {
                console.error(`‚ö†Ô∏è [${clientObj.username}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:`, err.message);
            }
        } else {
            console.log(`‚ÑπÔ∏è [${clientObj.username}] –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
        }

        return true;
    } catch (err) {
        console.error(`‚ùå [${clientObj.username}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, err.message);
        return false;
    }
}
// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ ===
async function processVkLink(link) {
    try {
        const parsed = parseVkPostUrl(link);
        if (!parsed) {
            console.warn(`üö´ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link}`);
            return;
        }

        const ownerVkId = Math.abs(parseInt(parsed.ownerId));
        console.log(`üîç –ü–æ—Å—Ç –æ—Ç VK ID: ${ownerVkId}`);

        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ (–±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        let targetAccount = null;
        
        for (const acc of ACCOUNTS) {
            if (!acc.vk_token) continue;
            
            try {
                // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π vk_user_id
                if (acc.vk_user_id && Math.abs(acc.vk_user_id) === ownerVkId) {
                    targetAccount = acc;
                    break;
                }
                
                // –ï—Å–ª–∏ vk_user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ API VK
                if (!acc.vk_user_id) {
                    const accVkId = await getVkUserId(acc.vk_token);
                    if (accVkId === ownerVkId) {
                        targetAccount = acc;
                        break;
                    }
                }
            } catch (err) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${acc.id}:`, err.message);
            }
        }

        if (!targetAccount) {
            console.warn(`üö´ –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è VK ID ${ownerVkId}`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        let clientObj = clients.find(c => c.id === targetAccount.id);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
        if (!clientObj) {
            console.log(`‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç ${targetAccount.id}...`);
            clientObj = await initClient(targetAccount);
            if (clientObj) {
                clients.push(clientObj);
            } else {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${targetAccount.id}`);
                return;
            }
        }

        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const targetChatId = clientObj.chat_id || targetAccount.chat_id;
        console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: ${targetChatId}`);
        
        const screenshotPath = await generateScreenshot(link);
        await sendToChat(clientObj, targetChatId, link, screenshotPath);

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, err.message);
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
async function initializeClients() {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ACCOUNTS.forEach(acc => {
            if (!acc.api_id || !acc.api_hash) {
                console.log(`‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç ${acc.id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ API credentials`);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for (const account of ACCOUNTS) {
            const client = await initClient(account);
            if (client) {
                clients.push(client);
            }
            await delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        }

        console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ ${ACCOUNTS.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    } catch (err) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:", err);
        process.exit(1);
    }
}

const PORT =  3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É1 ${PORT}`);
});
